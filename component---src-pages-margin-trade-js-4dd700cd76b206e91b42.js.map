{"version":3,"sources":["webpack:///./src/pages/margin-trade.js"],"names":["ProfitCalc","state","initPps","quantity","interest","newPps","leverage","initCap","handleInput","event","name","this","setState","target","value","render","inputsPresent","totalBuy","parseInt","totalMarketValue","growth","grossp","owed","Math","abs","netp","remBuy","title","columns","relaxed","Column","Field","onChange","placeholder","icon","style","color","justifyContent","display","alignItems","padding","basic","celled","collapsing","Header","Row","HeaderCell","label","dollarSign","percent","vertical","React","Component"],"mappings":"2PAeqBA,E,4JACnBC,MAAQ,CACNC,QAAS,GACTC,SAAU,GACVC,SAAU,GACVC,OAAQ,GACRC,SAAU,GACVC,QAAS,I,oHAGXC,YAAA,SAAYC,EAAOC,GAAO,IAAD,EACvBC,KAAKC,WAAL,MAAiBF,GAAOD,EAAMI,OAAOC,MAArC,K,EAGFC,OAAA,WAAU,IAAD,SACwCJ,KAAKV,MAA5CC,EADD,EACCA,QAASC,EADV,EACUA,SAAUE,EADpB,EACoBA,OAAQE,EAD5B,EAC4BA,QAE7BH,EAAWO,KAAKV,MAAMG,SAAW,IACjCE,EAAWK,KAAKV,MAAMK,SAAW,IAEjCU,IACQ,KAAZd,GACa,KAAbC,GACW,KAAXE,GACY,KAAZE,GACa,KAAbH,GACa,KAAbE,GAIIW,EAAWC,SAASX,GAAWA,EAAUD,EACzCa,EAAmBjB,EAAUC,EAC7BiB,GAAUf,EAASH,GAAWA,EAC9BmB,EAASF,EAAmBC,EAC5BE,EAAOC,KAAKC,IAAIH,GAAUjB,EAC1BqB,EAAOJ,EAASE,KAAKC,IAAIF,GACzBI,EAAST,EAAWf,EAAUC,EAEpC,OACE,kBAAC,IAAD,CAAQwB,MAAM,gBACZ,kBAAC,IAAD,CAAKA,MAAM,4BACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMC,QAAS,EAAGC,QAAQ,QACxB,kBAAC,IAAKC,OAAN,KACE,kBAAC,IAAD,KACE,uDAEA,oEACA,kBAAC,IAAKC,MAAN,KACE,mDACA,kBAAC,IAAD,CACEjB,MAAOH,KAAKV,MAAMM,QAClByB,SAAU,SAAAvB,GAAK,OAAI,EAAKD,YAAYC,EAAO,YAC3CwB,YAAY,kBACZC,KAAK,iBAIT,kBAAC,IAAKH,MAAN,KACE,6CACA,kBAAC,IAAD,CACEjB,MAAOH,KAAKV,MAAMK,SAClB0B,SAAU,SAAAvB,GAAK,OAAI,EAAKD,YAAYC,EAAO,aAC3CwB,YAAY,WACZC,KAAK,aAIT,kBAAC,IAAKH,MAAN,KACE,4CACA,kBAAC,IAAD,CACEjB,MAAOH,KAAKV,MAAMG,SAClB4B,SAAU,SAAAvB,GAAK,OAAI,EAAKD,YAAYC,EAAO,aAC3CwB,YAAY,yBACZC,KAAK,aAGT,kBAAC,IAAKH,MAAN,KACE,+CACA,kBAAC,IAAD,CACEjB,MAAOH,KAAKV,MAAMC,QAClB8B,SAAU,SAAAvB,GAAK,OAAI,EAAKD,YAAYC,EAAO,YAC3CwB,YAAY,kBACZC,KAAK,iBAIT,kBAAC,IAAKH,MAAN,KACE,4CACA,kBAAC,IAAD,CACEjB,MAAOH,KAAKV,MAAME,SAClB6B,SAAU,SAAAvB,GAAK,OAAI,EAAKD,YAAYC,EAAO,aAC3CwB,YAAY,qBACZC,KAAK,oBAIT,kBAAC,IAAKH,MAAN,KACE,oDACA,kBAAC,IAAD,CACEjB,MAAOH,KAAKV,MAAMI,OAClB2B,SAAU,SAAAvB,GAAK,OAAI,EAAKD,YAAYC,EAAO,WAC3CwB,YAAY,UACZC,KAAK,mBAMb,kBAAC,IAAKJ,OAAN,KACGX,EAAmBF,GAClB,wBACEkB,MAAO,CACLC,MAAO,MACPC,eAAgB,SAChBC,QAAS,SAJb,sCAWF,kBAAC,IAAD,CAAab,KAAMT,EAAgBS,EAAO,IAC1C,yBACEU,MAAO,CACLG,QAAS,OACTD,eAAgB,SAChBE,WAAY,SACZC,QAAS,SAGX,kBAAC,IAAD,CAAOC,MAAM,OAAOC,QAAM,EAACC,YAAU,GACnC,kBAAC,IAAMC,OAAP,KACE,kBAAC,IAAMC,IAAP,KACE,kBAAC,IAAMC,WAAP,MACA,kBAAC,IAAMA,WAAP,gBAIJ,kBAAC,IAAD,CACEC,MAAM,qBACNjC,MAAOG,EACPD,cAAeA,EACfgC,YAAU,IAEZ,kBAAC,IAAD,CACED,MAAM,8BACNjC,MAAOK,EACPH,cAAeA,EACfgC,YAAU,IAEZ,kBAAC,IAAD,CACED,MAAM,yBACNjC,MAAOY,EACPV,cAAeA,EACfgC,YAAU,IAEZ,kBAAC,IAAD,CACED,MAAM,SACNjC,MAAgB,IAATM,EACPJ,cAAeA,EACfiC,SAAO,IAET,kBAAC,IAAD,CACEF,MAAM,eACNjC,MAAOO,EACPL,cAAeA,EACfgC,YAAU,IAEZ,kBAAC,IAAD,CACED,MAAM,wBACNjC,MAAOQ,EACPN,cAAeA,EACfgC,YAAU,IAEZ,kBAAC,IAAD,CACED,MAAM,yCACNjC,MAAOW,EACPT,cAAeA,EACfgC,YAAU,QAOpB,kBAAC,IAAD,CAASE,UAAQ,GAAjB,a,GA1L8BC,IAAMC","file":"component---src-pages-margin-trade-js-4dd700cd76b206e91b42.js","sourcesContent":["import React from \"react\";\nimport {\n  Segment,\n  Grid,\n  Divider,\n  Input,\n  Form,\n  Table,\n} from \"semantic-ui-react\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport TableCell from \"../components/TableCell\";\nimport TotalProfit from \"../components/TotalProfit\";\n\nexport default class ProfitCalc extends React.Component {\n  state = {\n    initPps: \"\",\n    quantity: \"\",\n    interest: \"\",\n    newPps: \"\",\n    leverage: \"\",\n    initCap: \"\",\n  };\n\n  handleInput(event, name) {\n    this.setState({ [name]: event.target.value });\n  }\n\n  render() {\n    const { initPps, quantity, newPps, initCap } = this.state;\n    //interest to percentage\n    const interest = this.state.interest / 100;\n    const leverage = this.state.leverage / 100;\n\n    const inputsPresent = !!(\n      initPps !== \"\" &&\n      quantity !== \"\" &&\n      newPps !== \"\" &&\n      initCap !== \"\" &&\n      interest !== \"\" &&\n      leverage !== \"\"\n    );\n\n    //output calculations\n    const totalBuy = parseInt(initCap) + initCap * leverage;\n    const totalMarketValue = initPps * quantity;\n    const growth = (newPps - initPps) / initPps;\n    const grossp = totalMarketValue * growth;\n    const owed = Math.abs(grossp) * interest;\n    const netp = grossp - Math.abs(owed);\n    const remBuy = totalBuy - initPps * quantity;\n\n    return (\n      <Layout title=\"margin-trade\">\n        <SEO title=\"Margin Trade Calculator\" />\n        <Segment>\n          <Grid columns={2} relaxed=\"very\">\n            <Grid.Column>\n              <Form>\n                <h1>Margin Trade Calculator</h1>\n\n                <p>Enter Margin Trade Information Below:</p>\n                <Form.Field>\n                  <label>Initial Capital:</label>\n                  <Input\n                    value={this.state.initCap}\n                    onChange={event => this.handleInput(event, \"initCap\")}\n                    placeholder=\"Initial Capital\"\n                    icon=\"dollar sign\"\n                  />\n                </Form.Field>\n\n                <Form.Field>\n                  <label>Leverage: </label>\n                  <Input\n                    value={this.state.leverage}\n                    onChange={event => this.handleInput(event, \"leverage\")}\n                    placeholder=\"Leverage\"\n                    icon=\"percent\"\n                  />\n                </Form.Field>\n\n                <Form.Field>\n                  <label>Interest:</label>\n                  <Input\n                    value={this.state.interest}\n                    onChange={event => this.handleInput(event, \"interest\")}\n                    placeholder=\"Interest Or Commission\"\n                    icon=\"percent\"\n                  />\n                </Form.Field>\n                <Form.Field>\n                  <label>Stock Price:</label>\n                  <Input\n                    value={this.state.initPps}\n                    onChange={event => this.handleInput(event, \"initPps\")}\n                    placeholder=\"Price Per Share\"\n                    icon=\"dollar sign\"\n                  />\n                </Form.Field>\n\n                <Form.Field>\n                  <label>Quantity:</label>\n                  <Input\n                    value={this.state.quantity}\n                    onChange={event => this.handleInput(event, \"quantity\")}\n                    placeholder=\"Quantity of Shares\"\n                    icon=\"sort amount up\"\n                  />\n                </Form.Field>\n\n                <Form.Field>\n                  <label>New Stock Price: </label>\n                  <Input\n                    value={this.state.newPps}\n                    onChange={event => this.handleInput(event, \"newPps\")}\n                    placeholder=\"New PPS\"\n                    icon=\"dollar sign\"\n                  />\n                </Form.Field>\n              </Form>\n            </Grid.Column>\n\n            <Grid.Column>\n              {totalMarketValue > totalBuy && (\n                <h4\n                  style={{\n                    color: \"red\",\n                    justifyContent: \"center\",\n                    display: \"flex\",\n                  }}\n                >\n                  YOUR PURCHASE EXCEEDS BUYING POWER\n                </h4>\n              )}\n\n              <TotalProfit netp={inputsPresent ? netp : 0} />\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                  padding: \"10px\",\n                }}\n              >\n                <Table basic=\"very\" celled collapsing>\n                  <Table.Header>\n                    <Table.Row>\n                      <Table.HeaderCell />\n                      <Table.HeaderCell>Value</Table.HeaderCell>\n                    </Table.Row>\n                  </Table.Header>\n\n                  <TableCell\n                    label=\"Total Buying Power\"\n                    value={totalBuy}\n                    inputsPresent={inputsPresent}\n                    dollarSign\n                  />\n                  <TableCell\n                    label=\"Total Market Purchase Value\"\n                    value={totalMarketValue}\n                    inputsPresent={inputsPresent}\n                    dollarSign\n                  />\n                  <TableCell\n                    label=\"Remaining Buying Power\"\n                    value={remBuy}\n                    inputsPresent={inputsPresent}\n                    dollarSign\n                  />\n                  <TableCell\n                    label=\"Growth\"\n                    value={growth * 100}\n                    inputsPresent={inputsPresent}\n                    percent\n                  />\n                  <TableCell\n                    label=\"Gross Profit\"\n                    value={grossp}\n                    inputsPresent={inputsPresent}\n                    dollarSign\n                  />\n                  <TableCell\n                    label=\"Amount Owed To Broker\"\n                    value={owed}\n                    inputsPresent={inputsPresent}\n                    dollarSign\n                  />\n                  <TableCell\n                    label=\"Net Profit After Interest / Commission\"\n                    value={netp}\n                    inputsPresent={inputsPresent}\n                    dollarSign\n                  />\n                </Table>\n              </div>\n            </Grid.Column>\n          </Grid>\n\n          <Divider vertical>yields</Divider>\n        </Segment>\n      </Layout>\n    );\n  }\n}\n"],"sourceRoot":""}