{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["ProfitCalc","state","initPps","quantity","interest","newPps","handleInput","event","name","this","setState","target","value","render","imv","growth","grossp","netp","Math","abs","inputsPresent","title","columns","relaxed","Column","Field","onChange","placeholder","icon","style","display","justifyContent","alignItems","padding","basic","celled","collapsing","Header","Row","HeaderCell","label","dollarSign","percent","vertical","React","Component"],"mappings":"kQAWqBA,E,4JACnBC,MAAQ,CACNC,QAAS,GACTC,SAAU,GACVC,SAAU,GACVC,OAAQ,I,oHAGVC,YAAA,SAAYC,EAAOC,GAAO,IAAD,EACvBC,KAAKC,WAAL,MAAiBF,GAAOD,EAAMI,OAAOC,MAArC,K,EAGFC,OAAA,WAAU,IAAD,SAC+BJ,KAAKR,MAAnCC,EADD,EACCA,QAASC,EADV,EACUA,SAAUE,EADpB,EACoBA,OAErBD,EAAWK,KAAKR,MAAMG,SAAW,IAGjCU,EAAMZ,EAAUC,EAChBY,GAAUV,EAASH,GAAWA,EAC9Bc,EAASX,EAASF,EAAWD,EAAUC,EACvCc,EAAOD,EAASE,KAAKC,IAAIH,EAASZ,GAElCgB,IACQ,KAAZlB,GACa,KAAbC,GACW,KAAXE,GACa,KAAbD,GAGF,OACE,kBAAC,IAAD,CAAQiB,MAAM,IACZ,kBAAC,IAAD,CAAKA,MAAM,sBACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMC,QAAS,EAAGC,QAAQ,QACxB,kBAAC,IAAKC,OAAN,KACE,kBAAC,IAAD,KACE,iDAEA,6DAEA,kBAAC,IAAKC,MAAN,KACE,+CACA,kBAAC,IAAD,CACEb,MAAOH,KAAKR,MAAMC,QAClBwB,SAAU,SAAAnB,GAAK,OAAI,EAAKD,YAAYC,EAAO,YAC3CoB,YAAY,kBACZC,KAAK,iBAIT,kBAAC,IAAKH,MAAN,KACE,4CACA,kBAAC,IAAD,CACEb,MAAOH,KAAKR,MAAME,SAClBuB,SAAU,SAAAnB,GAAK,OAAI,EAAKD,YAAYC,EAAO,aAC3CoB,YAAY,qBACZC,KAAK,oBAIT,kBAAC,IAAKH,MAAN,KACE,yDACA,kBAAC,IAAD,CACEb,MAAOH,KAAKR,MAAMG,SAClBsB,SAAU,SAAAnB,GAAK,OAAI,EAAKD,YAAYC,EAAO,aAC3CoB,YAAY,wBACZC,KAAK,aAIT,kBAAC,IAAKH,MAAN,KACE,oDACA,kBAAC,IAAD,CACEb,MAAOH,KAAKR,MAAMI,OAClBqB,SAAU,SAAAnB,GAAK,OAAI,EAAKD,YAAYC,EAAO,WAC3CoB,YAAY,UACZC,KAAK,mBAKb,kBAAC,IAAKJ,OAAN,KACE,kBAAC,IAAD,CAAaP,KAAMG,EAAgBH,EAAO,IAE1C,yBACEY,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,QAAS,SAGX,kBAAC,IAAD,CAAOC,MAAM,OAAOC,QAAM,EAACC,YAAU,GACnC,kBAAC,IAAMC,OAAP,KACE,kBAAC,IAAMC,IAAP,KACE,kBAAC,IAAMC,WAAP,MACA,kBAAC,IAAMA,WAAP,gBAIJ,kBAAC,IAAD,CACEC,MAAM,mCACN5B,MAAOE,EACPM,cAAeA,EACfqB,YAAU,IAEZ,kBAAC,IAAD,CACED,MAAM,SACN5B,MAAgB,IAATG,EACPK,cAAeA,EACfsB,SAAO,IAET,kBAAC,IAAD,CACEF,MAAM,eACN5B,MAAOI,EACPI,cAAeA,EACfqB,YAAU,IAEZ,kBAAC,IAAD,CACED,MAAM,0CACN5B,MAAOK,EACPG,cAAeA,EACfqB,YAAU,QAOpB,kBAAC,IAAD,CAASE,UAAQ,GAAjB,a,GAlI8BC,IAAMC","file":"component---src-pages-index-js-6b880225b3142786900c.js","sourcesContent":["import React from \"react\";\nimport { Segment, Grid, Divider, Input, Form, Table } from \"semantic-ui-react\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport TableCell from \"../components/TableCell\";\nimport TotalProfit from \"../components/TotalProfit\";\n\n//css\nimport \"semantic-ui-css/semantic.min.css\";\n\nexport default class ProfitCalc extends React.Component {\n  state = {\n    initPps: \"\",\n    quantity: \"\",\n    interest: \"\",\n    newPps: \"\",\n  };\n\n  handleInput(event, name) {\n    this.setState({ [name]: event.target.value });\n  }\n\n  render() {\n    const { initPps, quantity, newPps } = this.state;\n    //interest to percentage\n    const interest = this.state.interest / 100;\n\n    //output calculations\n    const imv = initPps * quantity;\n    const growth = (newPps - initPps) / initPps;\n    const grossp = newPps * quantity - initPps * quantity;\n    const netp = grossp - Math.abs(grossp * interest);\n\n    const inputsPresent = !!(\n      initPps !== \"\" &&\n      quantity !== \"\" &&\n      newPps !== \"\" &&\n      interest !== \"\"\n    );\n\n    return (\n      <Layout title=\"\">\n        <SEO title=\"Profit Calculator\" />\n        <Segment>\n          <Grid columns={2} relaxed=\"very\">\n            <Grid.Column>\n              <Form>\n                <h1>Profit Calculator</h1>\n\n                <p>Enter Stock Information Below:</p>\n\n                <Form.Field>\n                  <label>Stock Price:</label>\n                  <Input\n                    value={this.state.initPps}\n                    onChange={event => this.handleInput(event, \"initPps\")}\n                    placeholder=\"Price Per Share\"\n                    icon=\"dollar sign\"\n                  />\n                </Form.Field>\n\n                <Form.Field>\n                  <label>Quantity:</label>\n                  <Input\n                    value={this.state.quantity}\n                    onChange={event => this.handleInput(event, \"quantity\")}\n                    placeholder=\"Quantity of Shares\"\n                    icon=\"sort amount up\"\n                  />\n                </Form.Field>\n\n                <Form.Field>\n                  <label>Interest or Comission:</label>\n                  <Input\n                    value={this.state.interest}\n                    onChange={event => this.handleInput(event, \"interest\")}\n                    placeholder=\"Interest or Comission\"\n                    icon=\"percent\"\n                  />\n                </Form.Field>\n\n                <Form.Field>\n                  <label>New Stock Price: </label>\n                  <Input\n                    value={this.state.newPps}\n                    onChange={event => this.handleInput(event, \"newPps\")}\n                    placeholder=\"New PPS\"\n                    icon=\"dollar sign\"\n                  />\n                </Form.Field>\n              </Form>\n            </Grid.Column>\n            <Grid.Column>\n              <TotalProfit netp={inputsPresent ? netp : 0} />\n\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                  padding: \"10px\",\n                }}\n              >\n                <Table basic=\"very\" celled collapsing>\n                  <Table.Header>\n                    <Table.Row>\n                      <Table.HeaderCell />\n                      <Table.HeaderCell>Value</Table.HeaderCell>\n                    </Table.Row>\n                  </Table.Header>\n\n                  <TableCell\n                    label=\"Initial Market Value of Position\"\n                    value={imv}\n                    inputsPresent={inputsPresent}\n                    dollarSign\n                  />\n                  <TableCell\n                    label=\"Growth\"\n                    value={growth * 100}\n                    inputsPresent={inputsPresent}\n                    percent\n                  />\n                  <TableCell\n                    label=\"Gross Profit\"\n                    value={grossp}\n                    inputsPresent={inputsPresent}\n                    dollarSign\n                  />\n                  <TableCell\n                    label=\"Net Profit After Interest / Commissionm\"\n                    value={netp}\n                    inputsPresent={inputsPresent}\n                    dollarSign\n                  />\n                </Table>\n              </div>\n            </Grid.Column>\n          </Grid>\n\n          <Divider vertical>yields</Divider>\n        </Segment>\n      </Layout>\n    );\n  }\n}\n"],"sourceRoot":""}